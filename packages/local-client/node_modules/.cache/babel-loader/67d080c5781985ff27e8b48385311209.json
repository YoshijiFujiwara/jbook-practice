{"ast":null,"code":"var _jsxFileName = \"/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/components/text-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./text-editor.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport MDEditor from \"@uiw/react-md-editor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextEditor = () => {\n  _s();\n\n  const ref = useRef(null);\n  const [editing, setEditing] = useState(false);\n  const [value, setValue] = useState(\"# Header\");\n  useEffect(() => {\n    const listener = event => {\n      if (ref.current && event.target && ref.current.contains(event.target)) {\n        // element clicked on is inside editor\n        return;\n      }\n\n      setEditing(false);\n    };\n\n    document.addEventListener(\"click\", listener, {\n      capture: true\n    });\n    return () => {\n      document.removeEventListener(\"click\", listener, {\n        capture: true\n      });\n    };\n  }, []);\n\n  if (editing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      children: /*#__PURE__*/_jsxDEV(MDEditor, {\n        value: value,\n        onChange: v => {\n          setValue(v || \"\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => setEditing(true),\n    children: /*#__PURE__*/_jsxDEV(MDEditor.Markdown, {\n      source: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TextEditor, \"QpuIoC74VAMUhAUmAosx6qtHA54=\");\n\n_c = TextEditor;\nexport default TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/components/text-editor.tsx"],"names":["useEffect","useRef","useState","MDEditor","TextEditor","ref","editing","setEditing","value","setValue","listener","event","current","target","contains","document","addEventListener","capture","removeEventListener","v"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,sBAArB;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AACjC,QAAMC,GAAG,GAAGJ,MAAM,CAAwB,IAAxB,CAAlB;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,UAAD,CAAlC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,QAAQ,GAAIC,KAAD,IAAuB;AACtC,UACEN,GAAG,CAACO,OAAJ,IACAD,KAAK,CAACE,MADN,IAEAR,GAAG,CAACO,OAAJ,CAAYE,QAAZ,CAAqBH,KAAK,CAACE,MAA3B,CAHF,EAIE;AACA;AACA;AACD;;AACDN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD;;AAWAQ,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,QAAnC,EAA6C;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAA7C;AAEA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCR,QAAtC,EAAgD;AAAEO,QAAAA,OAAO,EAAE;AAAX,OAAhD;AACD,KAFD;AAGD,GAjBQ,EAiBN,EAjBM,CAAT;;AAmBA,MAAIX,OAAJ,EAAa;AACX,wBACE;AAAK,MAAA,GAAG,EAAED,GAAV;AAAA,6BACE,QAAC,QAAD;AACE,QAAA,KAAK,EAAEG,KADT;AAEE,QAAA,QAAQ,EAAGW,CAAD,IAAO;AACfV,UAAAA,QAAQ,CAACU,CAAC,IAAI,EAAN,CAAR;AACD;AAJH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAED,sBACE;AAAK,IAAA,OAAO,EAAE,MAAMZ,UAAU,CAAC,IAAD,CAA9B;AAAA,2BACE,QAAC,QAAD,CAAU,QAAV;AAAmB,MAAA,MAAM,EAAEC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA1CD;;GAAMJ,U;;KAAAA,U;AA4CN,eAAeA,UAAf","sourcesContent":["import \"./text-editor.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport MDEditor from \"@uiw/react-md-editor\";\n\nconst TextEditor: React.FC = () => {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [editing, setEditing] = useState(false);\n  const [value, setValue] = useState(\"# Header\");\n\n  useEffect(() => {\n    const listener = (event: MouseEvent) => {\n      if (\n        ref.current &&\n        event.target &&\n        ref.current.contains(event.target as Node)\n      ) {\n        // element clicked on is inside editor\n        return;\n      }\n      setEditing(false);\n    };\n    document.addEventListener(\"click\", listener, { capture: true });\n\n    return () => {\n      document.removeEventListener(\"click\", listener, { capture: true });\n    };\n  }, []);\n\n  if (editing) {\n    return (\n      <div ref={ref}>\n        <MDEditor\n          value={value}\n          onChange={(v) => {\n            setValue(v || \"\");\n          }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div onClick={() => setEditing(true)}>\n      <MDEditor.Markdown source={value} />\n    </div>\n  );\n};\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}