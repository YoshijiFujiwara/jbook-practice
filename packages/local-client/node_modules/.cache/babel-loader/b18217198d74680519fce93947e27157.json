{"ast":null,"code":"var _jsxFileName = \"/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/components/cell-list-item.tsx\";\nimport \"./cell-list-item.css\";\nimport TextEditor from \"./text-editor\";\nimport CodeCell from \"./code-cell\";\nimport ActionBar from \"./action-bar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CellListItem = ({\n  cell\n}) => {\n  let child;\n\n  if (cell.type === \"code\") {\n    child = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-bar-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(ActionBar, {\n          id: cell.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CodeCell, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    child = /*#__PURE__*/_jsxDEV(TextEditor, {\n      cell: cell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell-list-item\",\n    children: child\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n};\n\n_c = CellListItem;\nexport default CellListItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellListItem\");","map":{"version":3,"sources":["/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/components/cell-list-item.tsx"],"names":["TextEditor","CodeCell","ActionBar","CellListItem","cell","child","type","id"],"mappings":";AAAA,OAAO,sBAAP;AAEA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;;;AAMA,MAAMC,YAAyC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC9D,MAAIC,KAAJ;;AACA,MAAID,IAAI,CAACE,IAAL,KAAc,MAAlB,EAA0B;AACxBD,IAAAA,KAAK,gBACH;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,EAAE,EAAED,IAAI,CAACG;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEH;AAAhB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADF;AAQD,GATD,MASO;AACLC,IAAAA,KAAK,gBAAG,QAAC,UAAD;AAAY,MAAA,IAAI,EAAED;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAR;AACD;;AAED,sBAAO;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,cAAiCC;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhBD;;KAAMF,Y;AAkBN,eAAeA,YAAf","sourcesContent":["import \"./cell-list-item.css\";\nimport { Cell } from \"../state\";\nimport TextEditor from \"./text-editor\";\nimport CodeCell from \"./code-cell\";\nimport ActionBar from \"./action-bar\";\n\ninterface CellListItemProps {\n  cell: Cell;\n}\n\nconst CellListItem: React.FC<CellListItemProps> = ({ cell }) => {\n  let child: JSX.Element;\n  if (cell.type === \"code\") {\n    child = (\n      <>\n        <div className=\"action-bar-wrapper\">\n          <ActionBar id={cell.id} />\n        </div>\n        <CodeCell cell={cell} />\n      </>\n    );\n  } else {\n    child = <TextEditor cell={cell} />;\n  }\n\n  return <div className=\"cell-list-item\">{child}</div>;\n};\n\nexport default CellListItem;\n"]},"metadata":{},"sourceType":"module"}