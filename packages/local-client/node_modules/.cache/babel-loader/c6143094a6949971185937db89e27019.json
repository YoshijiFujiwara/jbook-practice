{"ast":null,"code":"var _jsxFileName = \"/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/components/code-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./code-editor.css\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\nimport { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = ({\n  initialValue,\n  onChange\n}) => {\n  _s();\n\n  const editorRef = useRef();\n\n  const onEditorDidMount = (getValue, monacoEditor) => {\n    var _monacoEditor$getMode;\n\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    (_monacoEditor$getMode = monacoEditor.getModel()) === null || _monacoEditor$getMode === void 0 ? void 0 : _monacoEditor$getMode.updateOptions({\n      tabSize: 2\n    });\n  };\n\n  const onFormatClick = () => {\n    // get current value from editor\n    const unformatted = editorRef.current.getModel().getValue(); // format that value\n\n    const formatted = prettier.format(unformatted, {\n      parser: \"babel\",\n      plugins: [parser],\n      useTabs: false,\n      singleQuote: true\n    }); // set the formatted value back in the editor\n\n    editorRef.current.setValue(formatted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onFormatClick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      editorDidMount: onEditorDidMount,\n      value: initialValue,\n      theme: \"dark\",\n      language: \"javascript\",\n      height: \"500px\",\n      options: {\n        wordWrap: \"on\",\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/components/code-editor.tsx"],"names":["MonacoEditor","prettier","parser","useRef","CodeEditor","initialValue","onChange","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","onFormatClick","unformatted","formatted","format","plugins","useTabs","singleQuote","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,OAAOA,YAAP,MAA6C,sBAA7C;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,MAAT,QAAuB,OAAvB;;;AAOA,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAgC;AAAA;;AAC5E,QAAMC,SAAS,GAAGJ,MAAM,EAAxB;;AAEA,QAAMK,gBAAgC,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAAA;;AACnEH,IAAAA,SAAS,CAACI,OAAV,GAAoBD,YAApB;AACAA,IAAAA,YAAY,CAACE,uBAAb,CAAqC,MAAM;AACzCN,MAAAA,QAAQ,CAACG,QAAQ,EAAT,CAAR;AACD,KAFD;AAIA,6BAAAC,YAAY,CAACG,QAAb,kFAAyBC,aAAzB,CAAuC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAvC;AACD,GAPD;;AASA,QAAMC,aAAa,GAAG,MAAM;AAC1B;AACA,UAAMC,WAAW,GAAGV,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB,CAF0B,CAI1B;;AACA,UAAMS,SAAS,GAAGjB,QAAQ,CAACkB,MAAT,CAAgBF,WAAhB,EAA6B;AAC7Cf,MAAAA,MAAM,EAAE,OADqC;AAE7CkB,MAAAA,OAAO,EAAE,CAAClB,MAAD,CAFoC;AAG7CmB,MAAAA,OAAO,EAAE,KAHoC;AAI7CC,MAAAA,WAAW,EAAE;AAJgC,KAA7B,CAAlB,CAL0B,CAY1B;;AACAf,IAAAA,SAAS,CAACI,OAAV,CAAkBY,QAAlB,CAA2BL,SAA3B;AACD,GAdD;;AAgBA,sBACE;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,0CADZ;AAEE,MAAA,OAAO,EAAEF,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,YAAD;AACE,MAAA,cAAc,EAAER,gBADlB;AAEE,MAAA,KAAK,EAAEH,YAFT;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,QAAQ,EAAC,YAJX;AAKE,MAAA,MAAM,EAAC,OALT;AAME,MAAA,OAAO,EAAE;AACPmB,QAAAA,QAAQ,EAAE,IADH;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFF;AAGPC,QAAAA,UAAU,EAAE,KAHL;AAIPC,QAAAA,OAAO,EAAE,KAJF;AAKPC,QAAAA,mBAAmB,EAAE,CALd;AAMPC,QAAAA,QAAQ,EAAE,EANH;AAOPC,QAAAA,oBAAoB,EAAE,KAPf;AAQPC,QAAAA,eAAe,EAAE;AARV;AANX;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAvDD;;GAAM5B,U;;KAAAA,U;AAyDN,eAAeA,UAAf","sourcesContent":["import \"./code-editor.css\";\nimport MonacoEditor, { EditorDidMount } from \"@monaco-editor/react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\nimport { useRef } from \"react\";\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ initialValue, onChange }) => {\n  const editorRef = useRef<any>();\n\n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2 });\n  };\n\n  const onFormatClick = () => {\n    // get current value from editor\n    const unformatted = editorRef.current.getModel().getValue();\n\n    // format that value\n    const formatted = prettier.format(unformatted, {\n      parser: \"babel\",\n      plugins: [parser],\n      useTabs: false,\n      singleQuote: true,\n    });\n\n    // set the formatted value back in the editor\n    editorRef.current.setValue(formatted);\n  };\n\n  return (\n    <div>\n      <button\n        className=\"button button-format is-primary is-small\"\n        onClick={onFormatClick}\n      >\n        Format\n      </button>\n      <MonacoEditor\n        editorDidMount={onEditorDidMount}\n        value={initialValue}\n        theme=\"dark\"\n        language=\"javascript\"\n        height=\"500px\"\n        options={{\n          wordWrap: \"on\",\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}