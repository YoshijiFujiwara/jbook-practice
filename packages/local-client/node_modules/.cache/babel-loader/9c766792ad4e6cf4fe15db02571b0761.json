{"ast":null,"code":"var _jsxFileName = \"/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport CodeEditor from \"./code-editor\";\nimport Preview from \"./preview\";\nimport bundle from \"../bundler\";\nimport Resizable from \"./resizable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = () => {\n  _s();\n\n  const [code, setCode] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  useEffect(() => {\n    setTimeout(async () => {\n      const output = await bundle(input);\n      setCode(output);\n    }, 1000);\n  }, [input]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: \"const a = 1;\",\n          onChange: value => setInput(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: code\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"pjWxrgJu1/XAIqKDDrYJ5Gxj5vk=\");\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/components/code-cell.tsx"],"names":["useEffect","useState","CodeEditor","Preview","bundle","Resizable","CodeCell","code","setCode","input","setInput","setTimeout","output","height","display","flexDirection","value"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,UAAU,CAAC,YAAY;AACrB,YAAMC,MAAM,GAAG,MAAMR,MAAM,CAACK,KAAD,CAA3B;AACAD,MAAAA,OAAO,CAACI,MAAD,CAAP;AACD,KAHS,EAGP,IAHO,CAAV;AAID,GALQ,EAKN,CAACH,KAAD,CALM,CAAT;AAOA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEI,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,OAAO,EAAE,MAA3B;AAAmCC,QAAAA,aAAa,EAAE;AAAlD,OAAZ;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,YAAY,EAAC,cADf;AAEE,UAAA,QAAQ,EAAGC,KAAD,IAAWN,QAAQ,CAACM,KAAD;AAF/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,OAAD;AAAS,QAAA,IAAI,EAAET;AAAf;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAzBD;;GAAMD,Q;;KAAAA,Q;AA2BN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport CodeEditor from \"./code-editor\";\nimport Preview from \"./preview\";\nimport bundle from \"../bundler\";\nimport Resizable from \"./resizable\";\n\nconst CodeCell = () => {\n  const [code, setCode] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    setTimeout(async () => {\n      const output = await bundle(input);\n      setCode(output);\n    }, 1000);\n  }, [input]);\n\n  return (\n    <Resizable direction=\"vertical\">\n      <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"row\" }}>\n        <Resizable direction=\"horizontal\">\n          <CodeEditor\n            initialValue=\"const a = 1;\"\n            onChange={(value) => setInput(value)}\n          />\n        </Resizable>\n\n        <Preview code={code} />\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}