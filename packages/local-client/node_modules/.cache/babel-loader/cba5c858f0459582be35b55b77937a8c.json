{"ast":null,"code":"import { ActionType } from \"../action-types\";\nimport produce from \"immer\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce((state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n\n    default:\n      return state;\n  }\n});\nexport default reducer;","map":{"version":3,"sources":["/Users/yoshiji/webdev/udemy/react-typescript/jbook/src/state/reducers/cellsReducer.ts"],"names":["ActionType","produce","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","INSERT_CELL_BEFORE"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;AAGA,OAAOC,OAAP,MAAoB,OAApB;AAWA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,OAAO,EAAE,KADsB;AAE/BC,EAAAA,KAAK,EAAE,IAFwB;AAG/BC,EAAAA,KAAK,EAAE,EAHwB;AAI/BC,EAAAA,IAAI,EAAE;AAJyB,CAAjC;AAOA,MAAMC,OAAO,GAAGN,OAAO,CAAC,CAACO,KAAiB,GAAGN,YAArB,EAAmCO,MAAnC,KAAsD;AAC5E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,UAAU,CAACW,WAAhB;AACE,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAkBJ,MAAM,CAACK,OAA/B;AACAN,MAAAA,KAAK,CAACF,IAAN,CAAWM,EAAX,EAAeC,OAAf,GAAyBA,OAAzB;AACA;;AACF,SAAKb,UAAU,CAACe,WAAhB;AACE,aAAOP,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACK,OAAlB,CAAP;AACAN,MAAAA,KAAK,CAACH,KAAN,GAAcG,KAAK,CAACH,KAAN,CAAYW,MAAZ,CAAoBJ,EAAD,IAAQA,EAAE,KAAKH,MAAM,CAACK,OAAzC,CAAd;AAEA,aAAON,KAAP;;AACF,SAAKR,UAAU,CAACiB,SAAhB;AACE,aAAOT,KAAP;;AACF,SAAKR,UAAU,CAACkB,kBAAhB;AACE,aAAOV,KAAP;;AACF;AACE,aAAOA,KAAP;AAfJ;AAiBD,CAlBsB,CAAvB;AAoBA,eAAeD,OAAf","sourcesContent":["import { ActionType } from \"../action-types\";\nimport { Action } from \"../actions\";\nimport { Cell } from \"../cell\";\nimport produce from \"immer\";\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst reducer = produce((state: CellsState = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const { id, content } = action.payload;\n      state.data[id].content = content;\n      return;\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter((id) => id !== action.payload);\n\n      return state;\n    case ActionType.MOVE_CELL:\n      return state;\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n    default:\n      return state;\n  }\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}